程序编写原则：

1. 防流程重入
2. 减少接口与应用间的耦合性，上层应用不需要知道底层使用的注意事项
  如不应在底层申请资源(如内存、句柄)，而要求上层去释放
3. 日志
  编写目的：1运维查询数据 2程序性能调试
4. 抽象原则
  同样的代码，用第二次，便提取出来，不要为了赶功能而简单地复制代码


编码规范 (修改自Google c++ style, 还需要更新Google的cpplint.py作为检查脚本)
1 头文件
1.1 所有头文件都应该使用 #pragma once 防止头文件被多重包含
1.2 头文件依赖. 能用前置声明的地方尽量不使用 #include.
1.3 内联函数. 只有当函数只有 10 行甚至更少时才将其定义为内联函数.

2 作用域
2.1 使用静态成员函数或名字空间内的非成员函数, 尽量不要用裸的全局函数.
2.2 将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化.

3 类
3.1 少使用先重载
3.2 存取控制. 尽量将数据成员声明为 private, 并根据需要提供相应的存取函数.
3.2 倾向编写简短, 凝练的函数

4 其它
4.1 所有按引用传递的参数必须加上 const.  引用时修改数据引起的bug较难以发现
4.2 对于迭代器和其他模板对象使用前缀形式 (++i) 的自增, 自减运算符.
4.3 在任何可能的情况下都要使用 const.
4.4 整型. 仅使用INT, UINT
  typedef long long INT;
  typedef unsigned long long UINT;
4.5 少使用宏, 尽量以内联函数, 枚举和常量代替之.
4.6 0 和 NULL. 整数用 0, 实数用 0.0, 指针用 NULL, 字符 (串) 用 '\0'.
4.7 可多线程调用的变量和函数加_th后缀

5. 格式
5.1 每一行代码字符数不超过 80.
5.2 使用UTF-8 编码.
5.3 只使用空格, 每次缩进 2 个空格. vim 设置:
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
  set expandtab
5.4 逗号后面一定加空格，双目运算符前后加空格 

